#!/usr/bin/env python3
"""
Transport Matrix Analysis Script for SimAI
Analyzes the transport matrix data generated by SimAI simulation
"""

import os
import sys
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from collections import defaultdict

def load_data_transfer_matrix(filename):
    """Load data transfer matrix from file"""
    data_transfers = {}
    
    if not os.path.exists(filename):
        print(f"Warning: {filename} not found")
        return data_transfers
    
    with open(filename, 'r') as f:
        for line in f:
            if line.startswith('#'):
                continue
            parts = line.strip().split()
            if len(parts) >= 3:
                src = int(parts[0])
                dst = int(parts[1])
                data = int(parts[2])
                data_transfers[(src, dst)] = data
    
    return data_transfers

def load_topology_matrix(filename):
    """Load topology matrix from file"""
    topology = []
    
    if not os.path.exists(filename):
        print(f"Warning: {filename} not found")
        return topology
    
    with open(filename, 'r') as f:
        for line in f:
            if line.startswith('#'):
                continue
            parts = line.strip().split()
            if len(parts) >= 5:
                node1 = int(parts[0])
                node2 = int(parts[1])
                interface = int(parts[2])
                bandwidth = int(parts[3])
                delay = int(parts[4])
                topology.append({
                    'node1': node1,
                    'node2': node2,
                    'interface': interface,
                    'bandwidth': bandwidth,
                    'delay': delay
                })
    
    return topology

def analyze_gpu_data_transfers(data_transfers, gpu_count):
    """Analyze GPU data transfer patterns"""
    print("=" * 60)
    print("GPU DATA TRANSFER ANALYSIS")
    print("=" * 60)
    
    if not data_transfers:
        print("No data transfer information found")
        return
    
    # Create data transfer matrix
    matrix = np.zeros((gpu_count, gpu_count))
    total_transferred = 0
    
    for (src, dst), data in data_transfers.items():
        if src < gpu_count and dst < gpu_count:
            matrix[src][dst] = data
            total_transferred += data
    
    print(f"Total data transferred: {total_transferred:,} bytes ({total_transferred/1e9:.2f} GB)")
    print(f"Average data per GPU pair: {total_transferred/len(data_transfers):,.0f} bytes")
    
    # Find top data transfer pairs
    sorted_transfers = sorted(data_transfers.items(), key=lambda x: x[1], reverse=True)
    print("\nTop 10 GPU data transfer pairs:")
    for i, ((src, dst), data) in enumerate(sorted_transfers[:10]):
        print(f"{i+1:2d}. GPU {src:2d} -> GPU {dst:2d}: {data:12,} bytes ({data/1e6:.2f} MB)")
    
    # Calculate statistics
    data_values = list(data_transfers.values())
    if data_values:
        print(f"\nStatistics:")
        print(f"  Min transfer: {min(data_values):,} bytes")
        print(f"  Max transfer: {max(data_values):,} bytes")
        print(f"  Mean transfer: {np.mean(data_values):,.0f} bytes")
        print(f"  Median transfer: {np.median(data_values):,.0f} bytes")
        print(f"  Std deviation: {np.std(data_values):,.0f} bytes")
    
    return matrix

def visualize_data_transfers(matrix, output_file="gpu_data_transfers.png"):
    """Create a heatmap visualization of GPU data transfers"""
    plt.figure(figsize=(10, 8))
    
    # Convert to GB for better visualization
    matrix_gb = matrix / 1e9
    
    plt.imshow(matrix_gb, cmap='YlOrRd', interpolation='nearest')
    plt.colorbar(label='Data Transferred (GB)')
    plt.title('GPU Data Transfer Matrix')
    plt.xlabel('Destination GPU')
    plt.ylabel('Source GPU')
    
    # Add text annotations for significant transfers
    for i in range(matrix.shape[0]):
        for j in range(matrix.shape[1]):
            if matrix[i, j] > 0:
                plt.text(j, i, f'{matrix[i, j]/1e6:.1f}M', 
                        ha='center', va='center', fontsize=8)
    
    plt.tight_layout()
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    print(f"Visualization saved to {output_file}")

def generate_summary_report(data_transfers, topology, output_file="transport_matrix_report.txt"):
    """Generate a comprehensive summary report"""
    with open(output_file, 'w') as f:
        f.write("SimAI Transport Matrix Analysis Report\n")
        f.write("=" * 50 + "\n\n")
        
        f.write("1. DATA TRANSFER SUMMARY\n")
        f.write("-" * 25 + "\n")
        if data_transfers:
            total_data = sum(data_transfers.values())
            f.write(f"Total data transferred: {total_data:,} bytes ({total_data/1e9:.2f} GB)\n")
            f.write(f"Number of GPU pairs with transfers: {len(data_transfers)}\n")
            f.write(f"Average transfer per pair: {total_data/len(data_transfers):,.0f} bytes\n\n")
            
            f.write("Top data transfer pairs:\n")
            sorted_transfers = sorted(data_transfers.items(), key=lambda x: x[1], reverse=True)
            for i, ((src, dst), data) in enumerate(sorted_transfers[:10]):
                f.write(f"  {i+1:2d}. GPU {src:2d} -> GPU {dst:2d}: {data:12,} bytes\n")
        else:
            f.write("No data transfer information available\n")
        
        f.write("\n2. TOPOLOGY INFORMATION\n")
        f.write("-" * 25 + "\n")
        if topology:
            f.write(f"Number of links: {len(topology)}\n")
            total_bandwidth = sum(link['bandwidth'] for link in topology)
            f.write(f"Total network bandwidth: {total_bandwidth:,} bps ({total_bandwidth/1e9:.2f} Gbps)\n")
            avg_delay = np.mean([link['delay'] for link in topology])
            f.write(f"Average link delay: {avg_delay:.2f} ns\n")
        else:
            f.write("No topology information available\n")
    
    print(f"Summary report saved to {output_file}")

def main():
    """Main analysis function"""
    print("SimAI Transport Matrix Analysis")
    print("=" * 40)
    
    # Load data files
    data_file = "transport_matrix_data_transferred.txt"
    topo_file = "transport_matrix_topology.txt"
    
    data_transfers = load_data_transfer_matrix(data_file)
    topology = load_topology_matrix(topo_file)
    
    # Determine GPU count from data transfers
    if data_transfers:
        max_gpu = max(max(src, dst) for (src, dst) in data_transfers.keys()) + 1
        print(f"Detected {max_gpu} GPUs from data transfer matrix")
    else:
        max_gpu = 8  # Default assumption
        print(f"Using default GPU count: {max_gpu}")
    
    # Analyze data transfers
    matrix = analyze_gpu_data_transfers(data_transfers, max_gpu)
    
    # Create visualizations
    if matrix is not None and np.any(matrix):
        visualize_data_transfers(matrix)
    
    # Generate summary report
    generate_summary_report(data_transfers, topology)
    
    print("\nAnalysis complete!")

if __name__ == "__main__":
    main() 